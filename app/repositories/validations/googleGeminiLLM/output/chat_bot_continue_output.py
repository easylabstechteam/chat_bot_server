# ------------------- IMPORTS -------------------
from pydantic import BaseModel, Field, ValidationError
from datetime import datetime
from uuid import UUID
from typing import Any, Dict
import json


# ------------------- CHATBOT CONTINUE OUTPUT MODEL -------------------
class ChatBotContinueOutput(BaseModel):

    # Represents a chatbot's response when continuing a conversation.
    # Includes the AI's message, its role, the timestamp, and the session ID.

    role: str = Field(
        ...,
        min_length=1,
        max_length=50,
        description="The role of the sender of the message, usually 'assistant'.",
    )

    message: str = Field(
        ...,
        min_length=1,
        max_length=5000,
        description="The message text generated by the AI assistant.",
    )

    timestamp: datetime = Field(
        ..., description="The timestamp indicating when this message was generated."
    )

    session_id: UUID = Field(
        ..., description="The unique identifier for the chat session."
    )

    class Config:
        # Enforces strict validation to avoid silent errors
        extra = "forbid"  # Rejects unknown fields
        validate_assignment = True  # Ensures changes also get validated
        json_encoders = {
            UUID: str,  # Automatically converts UUID to string when exporting JSON
            datetime: lambda v: v.isoformat(),  # Use ISO-8601 for timestamps
        }

    def to_json(self) -> str:

        # Converts the object to a JSON string (safe for Redis, API responses, or logs).

        return self.model_dump_json()

    @classmethod
    def from_json(cls, json_str: str) -> "ChatBotContinueOutput":

        # Creates an instance of this model from a JSON string.
        # Raises ValidationError if the JSON is invalid or incomplete.

        try:
            data: Dict[str, Any] = json.loads(json_str)
            return cls(**data)
        except (json.JSONDecodeError, ValidationError) as e:
            raise ValueError(f"Invalid JSON for ChatBotContinueOutput: {e}")
